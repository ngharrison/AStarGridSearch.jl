var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AStarGridSearch","category":"page"},{"location":"#AStarGridSearch","page":"Home","title":"AStarGridSearch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AStarGridSearch.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AStarGridSearch]","category":"page"},{"location":"#AStarGridSearch.AStarGridSearch","page":"Home","title":"AStarGridSearch.AStarGridSearch","text":"This module contains types and functions for searching for paths on a 2D grid using A*. Its main use is to get the path cost (distance), but it can return the full path as well.\n\nMain public types and functions:\n\nPathCost\nfinalOrientation\ngetPath\n\n\n\n\n\n","category":"module"},{"location":"#AStarGridSearch.PathCost","page":"Home","title":"AStarGridSearch.PathCost","text":"Struct for PathCost function data. Previous computations are kept track of in its data. Can be used multiple times for the same start cell, saving computation.\n\nThe cells of the costMatrix contain the distance to them from the start cell. NaN is a placeholder meaning no path has been calculated to that cell yet. Inf means that cell is not reachable from the start cell.\n\nFields:\n\nstart::Any\ncostMatrix::Any\nresolution::Any\ndiffs::Any\ndist::Any\nheuristic::Any\nfrontier::Any\n\n\n\n\n\n","category":"type"},{"location":"#AStarGridSearch.PathCost-Tuple{Any, Any, Any}","page":"Home","title":"AStarGridSearch.PathCost","text":"PathCost(\n    start,\n    occupancy,\n    resolution;\n    diagonals,\n    dist,\n    heuristic\n) -> PathCost\n\n\nThe constructor initializes the path search algorithm, created for each new start cell.\n\nInputs:\n\nstart: the starting cell in the matrix\noccupancy: a matrix indicating which cells are occupied\nresolution: a vector of the width and height of each cell\ndiagonals: whether to include connectivity to diagonal cells or not (default true)\ndist: function to compute distance from current to next cell (default weightedEuclidian)\nheuristic: function to compute estimated distance from current to goal cell (default weightedEuclidian)\n\nNote: this type and associated methods can in fact be used with any N-dimensional cost array, not just a matrix.\n\n\n\n\n\n","category":"method"},{"location":"#AStarGridSearch.PathCost-Tuple{Any}","page":"Home","title":"AStarGridSearch.PathCost","text":"Search for a path to a desired goal cell using the A* algorithm.\n\nReturns the path cost, which will be Inf if it is unreachable.\n\nIf the cells of the path are desired, use the getPath function.\n\n\n\n\n\n","category":"method"},{"location":"#AStarGridSearch.finalOrientation-Tuple{PathCost, Any}","page":"Home","title":"AStarGridSearch.finalOrientation","text":"finalOrientation(S::PathCost, goal) -> Any\n\n\nGiven a PathCost and a goal point, this function returns the angle of the direction from penultimate cell to goal cell, effectively the direction at the end of the path to the goal.\n\n\n\n\n\n","category":"method"},{"location":"#AStarGridSearch.getPath-Tuple{PathCost, Any}","page":"Home","title":"AStarGridSearch.getPath","text":"getPath(S::PathCost, goal) -> Vector\n\n\nGiven a PathCost and a goal point, this function returns the entire list of cells from the start to the goal. Only useful to be called after the PathCost object is called with the goal cell.\n\n\n\n\n\n","category":"method"}]
}
