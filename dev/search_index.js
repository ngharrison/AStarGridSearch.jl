var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AStarGridSearch","category":"page"},{"location":"#AStarGridSearch","page":"Home","title":"AStarGridSearch","text":"","category":"section"},{"location":"#Quick-Intro","page":"Home","title":"Quick Intro","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains types and methods for searching for paths on a 2D grid using the A* algorithm. Its main use is to get the path cost (distance), but it can return the full path as well. The PathCost type is set up in such a way that it can be used as a cost function for optimization routines. A PathCost is created for a set start cell, and searches for multiple goal cells can be performed while keeping the same cost map between them, reducing computation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Following is a quick example of the main functionality of this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using AStarGridSearch\n\noccupancy = zeros(Bool, 10, 10); # open area\nobstacle = CartesianIndex.([\n    tuple.(2, 3:5)...,\n    tuple.(3, 3:5)...,\n    tuple.(4, 4:6)...,\n    tuple.(5, 5:7)...,\n    tuple.(6, 4:6)...,\n    tuple.(7, 3:5)...,\n    tuple.(8, 3:5)...,\n]);\noccupancy[obstacle] .= 1;\noccupancy # shown with obstacle\n\nstart = CartesianIndex(4, 3);\nresolution = (1, 1);\npathCost = PathCost(start, occupancy, resolution); # construct search object\n\ngoal = CartesianIndex(7, 9);\npathCost(goal) # calculate distance to goal; must be called before other methods\ngetPath(pathCost, goal) # full path from start to goal if it exists\nfinalOrientation(pathCost, goal) # angle in radians between the last two cells","category":"page"},{"location":"#Further-Info","page":"Home","title":"Further Info","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See below for further details on each type and method.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AStarGridSearch]","category":"page"},{"location":"#AStarGridSearch.PathCost","page":"Home","title":"AStarGridSearch.PathCost","text":"Struct for PathCost function data. Previous computations are kept track of in its data. Can be used multiple times for the same start cell, saving computation.\n\nThe cells of the costMatrix contain the distance to them from the start cell. NaN is a placeholder meaning no path has been calculated to that cell yet. Inf means that cell is not reachable from the start cell.\n\nFields:\n\nstart::Any\ncostMatrix::Any\nresolution::Any\ndiffs::Any\ndist::Any\nheuristic::Any\nfrontier::Any\n\n\n\n\n\n","category":"type"},{"location":"#AStarGridSearch.PathCost-Tuple{Any, Any, Any}","page":"Home","title":"AStarGridSearch.PathCost","text":"PathCost(\n    start,\n    occupancy,\n    resolution;\n    diagonals,\n    dist,\n    heuristic\n) -> PathCost\n\n\nThe constructor initializes the path search algorithm, created for each new start cell.\n\nInputs:\n\nstart: the starting cell in the matrix\noccupancy: a matrix indicating which cells are occupied\nresolution: a vector of the width and height of each cell\ndiagonals: whether to include connectivity to diagonal cells or not (default true)\ndist: function to compute distance from current to next cell (default weightedEuclidian)\nheuristic: function to compute estimated distance from current to goal cell (default weightedEuclidian)\n\nNote: this type and associated methods (except for finalOrientation) can in fact be used with any N-dimensional cost array, not just a matrix.\n\nThe parameters dist and heuristic can be passed any functions to compute distances as long as they take as input a current cell, a goal cell, and a cell resolution.\n\n\n\n\n\n","category":"method"},{"location":"#AStarGridSearch.PathCost-Tuple{Any}","page":"Home","title":"AStarGridSearch.PathCost","text":"Search for a path to a desired goal cell using the A* algorithm.\n\nReturns the path cost, which will be Inf if it is unreachable.\n\nIf the cells of the path are desired, use the getPath function.\n\n\n\n\n\n","category":"method"},{"location":"#AStarGridSearch.finalOrientation-Tuple{PathCost, Any}","page":"Home","title":"AStarGridSearch.finalOrientation","text":"finalOrientation(S::PathCost, goal) -> Any\n\n\nGiven a PathCost and a goal point, this function returns the angle in radians of the direction from penultimate cell to goal cell, effectively the direction at the end of the path to the goal.\n\n\n\n\n\n","category":"method"},{"location":"#AStarGridSearch.getPath-Tuple{PathCost, Any}","page":"Home","title":"AStarGridSearch.getPath","text":"getPath(S::PathCost, goal) -> Vector\n\n\nGiven a PathCost and a goal point, this function returns the entire list of cells from the start to the goal. Only useful to be called after the PathCost object is called with the goal cell.\n\n\n\n\n\n","category":"method"},{"location":"#AStarGridSearch.previousStep-Tuple{Any, Any}","page":"Home","title":"AStarGridSearch.previousStep","text":"previousStep(current, costMatrix) -> Any\n\n\nA function used internally to find what the previous step was in order to arrive at the current cell in the cost matrix.\n\n\n\n\n\n","category":"method"},{"location":"#AStarGridSearch.weightedEuclidian-Tuple{Any, Any, Any}","page":"Home","title":"AStarGridSearch.weightedEuclidian","text":"weightedEuclidian(x1, x2, weights) -> Any\n\n\nA function to calculate the euclidean distance between two cells based on a weighting along each dimension. In mathematical terms:\n\nleftlVert w circ (x_2 - x_1) rightrVert_2\n\nwhere x_1 and x_2 are the cells, w is the dimension weights, and circ is a Hadamard or element-wise product.\n\n\n\n\n\n","category":"method"}]
}
